import pandas as pd

# snakemake --reason --use-conda --keep-going --cluster-config config/cluster.yaml --cluster 'sbatch --exclude=cn[01-05] -t {cluster.time} --mem={cluster.mem} -c {cluster.cpus} -N {cluster.nodes} -o {cluster.output}' -j 50

PATH_to_samples = (
    "/groups/wyattgrp/users/amunzur/pipeline/resources/sample_lists/sample_list.tsv"
)


configfile: "config/config.yaml"


samples = pd.read_csv(PATH_to_samples, sep="\t")["sample_names"].tolist()

# samples = [pd.read_csv(PATH_to_samples, sep = '\t')["sample_names"].tolist() for PATH_to_samples in PATH_to_samples_list]

pair1 = [sample + "_R1" for sample in samples]
pair2 = [sample + "_R2" for sample in samples]

all_pairs = pair1 + pair2

PATH_hg38 = config["PATH_hg38"]
PATH_bed = config["PATH_bed"]
PATH_bg = config["PATH_bg"]
PATH_adapters = config["PATH_adapters"]
PATH_bets = config["PATH_bets"]
DIR_sample_maps = config["DIR_sample_maps"]
DIR_temp = config["DIR_temp"]
PATH_known_indels = config["PATH_known_indels"]
PATH_gold_std_indels = config["PATH_gold_std_indels"]
PATH_SNP_db = config["PATH_SNP_db"]

# data files
DIR_fastq = config["DIR_fastq"]
DIR_raw_fastq = config["DIR_raw_fastq"]
DIR_merged_fastq = config["DIR_merged_fastq"]
DIR_masked_fastq = config["DIR_masked_fastq"]
DIR_trimmed_fastq = config["DIR_trimmed_fastq"]
DIR_trimmed_unpaired_fastq = config["DIR_trimmed_unpaired_fastq"]
DIR_extracted_fastq = config["DIR_extracted_fastq"]
DIR_bams = config["DIR_bams"]
DIR_recalibrated_base_scores = config["DIR_recalibrated_base_scores"]

# fastqc reports
DIR_merged_fastqc = config["DIR_merged_fastqc"]
DIR_trimmed_fastqc = config["DIR_trimmed_fastqc"]

# metrics files
DIR_insertsize_metrics = config["DIR_insertsize_metrics"]
DIR_markdup_metrics = config["DIR_markdup_metrics"]
DIR_markdup_perc_metrics = config["DIR_markdup_perc_metrics"]
DIR_depth_metrics = config["DIR_depth_metrics"]
DIR_depth_metrics_dedup = config["DIR_depth_metrics_dedup"]
DIR_mpileup = config["DIR_mpileup"]
DIR_complexity_metrics = config["DIR_complexity_metrics"]
DIR_dedup_metrics = config["DIR_dedup_metrics"]
DIR_readcounts_metrics = config["DIR_readcounts_metrics"]
DIR_HS_metrics = config["DIR_HS_metrics"]

# variant calling
DIR_varscan = config["DIR_varscan"]
VarScan_snv = config["VarScan_snv"]
VarScan_indel = config["VarScan_indel"]
DIR_Vardict = config["DIR_Vardict"]
DIR_Vardict_reformatted = config["DIR_Vardict_reformatted"]
DIR_Mutect = config["DIR_Mutect"]
DIR_Haplotype = config["DIR_Haplotype"]

# annotating variants from varscan
ANNOVAR_snv_input = config["ANNOVAR_snv_input"]
ANNOVAR_indel_input = config["ANNOVAR_indel_input"]
ANNOVAR_snv_output = config["ANNOVAR_snv_output"]
ANNOVAR_indel_output = config["ANNOVAR_indel_output"]

ANNOVAR_Vardict_input = config["ANNOVAR_Vardict_input"]
ANNOVAR_Vardict_output = config["ANNOVAR_Vardict_output"]

ANNOVAR_GATK_input = config["ANNOVAR_GATK_input"]
ANNOVAR_GATK_output = config["ANNOVAR_GATK_output"]

# figures
DIR_insertsize_figures = config["DIR_insertsize_figures"]
DIR_insertsize_figures_PNG = config["DIR_insertsize_figures_PNG"]

###################################################
# TARGET FILES FOR RULE ALL
###################################################
RUN_FastQC_merged = expand(
    DIR_merged_fastqc + "/{wildcard}_fastqc.html", wildcard=all_pairs
)
RUN_FastQC_trimmed = expand(
    DIR_trimmed_fastqc + "/{wildcard}_fastqc.html", wildcard=all_pairs
)
MASK_FastQ = expand(DIR_masked_fastq + "/{wildcard}_masked.fastq", wildcard=all_pairs)

TRIM_FastQ = [
    expand(DIR_trimmed_fastq + "/{wildcard}_R1.fastq", wildcard=samples),
    expand(DIR_trimmed_unpaired_fastq + "/{wildcard}_R1_U.fastq", wildcard=samples),
    expand(DIR_trimmed_fastq + "/{wildcard}_R2.fastq", wildcard=samples),
    expand(DIR_trimmed_unpaired_fastq + "/{wildcard}_R2_U.fastq", wildcard=samples),
]

Call_SSCS_and_DCS = expand(DIR_bams + "/{consensus_type}_uBAM/{wildcard}.bam", consensus_type=["DCS", "SSCS"], wildcard=samples)
Map_SSCS_and_DCS = expand(DIR_bams + "/{consensus_type}_mBAM/{wildcard}.bam", consensus_type=["DCS", "SSCS"], wildcard=samples)
Filter_SSCS_and_DCS = expand(DIR_bams + "/{consensus_type}_filtered/{wildcard}.bam", consensus_type=["DCS", "SSCS3"], wildcard=samples)
# CollectHsMetrics = expand()


run_complexity_metrics_markdup = expand(
    DIR_complexity_metrics + "/PICARD_complexity_dedup/{wildcard}.txt", wildcard=samples
)
RUN_fastq_read_counts = expand(
    DIR_readcounts_metrics + "/raw/{wildcard}.txt", wildcard=samples
)
RUN_extract_markdup_perc = expand(
    DIR_markdup_perc_metrics + "/{wildcard}.txt", wildcard=samples
)

RUN_VarScan_snv = expand(VarScan_snv + "{consensus_type}/{wildcard}.vcf", consensus_type=["DCS", "SSCS3"], wildcard=samples)
RUN_VarScan_indel = expand(VarScan_indel + "{consensus_type}/{wildcard}.vcf", consensus_type=["DCS", "SSCS3"], wildcard=samples)
ANNOTATE_VarScan_snv = expand(ANNOVAR_snv_output + "{consensus_type}/{wildcard}.hg38_multianno.txt", consensus_type=["DCS", "SSCS3"], wildcard=samples)
ANNOTATE_VarScan_indel = expand(ANNOVAR_indel_output + "{consensus_type}/{wildcard}.hg38_multianno.txt", consensus_type=["DCS", "SSCS3"], wildcard=samples)

RUN_Vardict = expand(DIR_Vardict + "{consensus_type}/{wildcard}.vcf", consensus_type=["DCS", "SSCS3"], wildcard=samples)
ANNOTATE_Vardict = expand(ANNOVAR_Vardict_output + "{consensus_type}/{wildcard}.hg38_multianno.txt", consensus_type=["DCS", "SSCS3"], wildcard=samples)
RUN_Mutect2 = expand(DIR_Mutect + "{consensus_type}/filtered/{wildcard}_vcf.gz", consensus_type=["DCS", "SSCS3"], wildcard=samples)




make_ANNOVAR_snv_input = expand(
    ANNOVAR_snv_input + "/{wildcard}_anno.tsv", wildcard=samples
)
make_ANNOVAR_indel_input = expand(
    ANNOVAR_indel_input + "/{wildcard}_anno.tsv", wildcard=samples
)
make_ANNOVAR_vardict_input = expand(
    ANNOVAR_Vardict_input + "/{wildcard}_anno.tsv", wildcard=samples
)


run_insert_size = [
    expand(DIR_insertsize_metrics + "/{wildcard}.txt", wildcard=samples),
    expand(DIR_insertsize_figures + "/{wildcard}.pdf", wildcard=samples),
]
PDF_to_PNG = expand(DIR_insertsize_figures_PNG + "/{wildcard}.png", wildcard=samples)
run_depth = expand(DIR_depth_metrics + "/{wildcard}.txt", wildcard=samples)
run_depth_umi = expand(DIR_depth_metrics_dedup + "/{wildcard}.txt", wildcard=samples)


###################################################
# TARGET RULES
###################################################


# only use expansion here
rule all:
    input:
        # RUN_FastQC_merged,
        # MASK_FastQ,
        # TRIM_FastQ,
        # RUN_FastQC_trimmed,
        # RUN_mpileup,
        # RUN_fastq_read_counts, 
        # RUN_extract_markdup_perc,
        # RUN_varscan_snv, 
        # RUN_VarScan_indel, 
        # RUN_Mutect2,
        # FILTER_Mutect2,
        # RUN_Haplotype_caller,
        # RUN_genomics_DB,
        # RUN_genotype_vcfs,
        # VCF_to_table,
        # REFORMAT_GATK_results,
        # RUN_ANNOVAR_GATK,
        # RUN_Vardict,
        # REFORMAT_vardict_results,
        # MAKE_ANNOVAR_GATK_input,
        # make_ANNOVAR_snv_input,
        # make_ANNOVAR_indel_input,
        # make_ANNOVAR_vardict_input,
        # run_ANNOVAR_snv,
        # run_ANNOVAR_indel, 
        # run_ANNOVAR_vardict,
        # run_insert_size, 
        # PDF_to_PNG,
        # run_depth, 
        # run_depth_umi,
        # Fastq_to_uBAM,
        # uBam_to_Fastq,
        # uBAM_to_mBAM_raw,
        # add_read_groups,
        # uBAM_to_mBAM,       
        # Indel_realignment,
        # fixmate,
        # recalibrate_bases,
        # apply_base_scores,
        # GroupReadsByUmi,
        # CallDuplexConsensusReads,
        # CallMolecularConsensusReads,
        Call_SSCS_and_DCS,
        Map_SSCS_and_DCS,
        Filter_SSCS_and_DCS,      
        # remap_uBAMs,
        # Process_consensus_mBAMs,
        # Filter_DCS,
        # Filter_SSCS,


##### Modules #####
include: "rules/process_fastq.smk"
include: "rules/make_consensus_bams.smk"
include: "rules/filter_consensus_bams.smk"
include: "rules/index_bams.smk"
include: "rules/run_metrics.smk"
include: "rules/variant_calling.smk"
include: "rules/haplotype_caller.smk"